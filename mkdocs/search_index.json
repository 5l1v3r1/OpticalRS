{
    "docs": [
        {
            "location": "/", 
            "text": "OpticalRS\n\n\nOptical Remote Sensing Python Library\n\n\nOpticalRS is a free and open source Python implementation of passive optical remote sensing methods for the derivation of bathymetric maps and maps of submerged habitats. Some of these implementations are my original work and some are my interpretation of methods from journal papers. Citations will be found throughout this documentation to give credit to the original authors.\n\n\nThis documentation is a work in progress and may not currently be up to date with the code. Please contact me if you need help. This library is offered for use without any warranty of any kind in the hope that it can save other researchers the time required to implement these methods from scratch. The bits of code contained here have had various levels of testing. You must validate any results yourself. Please let me know if you find anything wrong or if you have any questions.\n\n\nFeatures\n\n\n\n\nFOSS Python code for the implementation of methods from remote sensing journal papers listed below.\n\n\nAnd more features listed\n\n\n\n\nReferences\n\n\n\n\nLyzenga, D.R., 1981. Remote sensing of bottom reflectance and water attenuation parameters in shallow water using aircraft and Landsat data. International Journal of Remote Sensing 2, 71\u201382. doi:10.1080/01431168108948342\n\n\nLyzenga, D.R., 1978. Passive remote sensing techniques for mapping water depth and bottom features. Appl. Opt. 17, 379\u2013383. doi:10.1364/AO.17.000379\n\n\nLyzenga, D.R., Malinas, N.P., Tanis, F.J., 2006. Multispectral bathymetry using a simple physically based algorithm. Geoscience and Remote Sensing, IEEE Transactions on 44, 2251 \u20132259. doi:10.1109/TGRS.2006.872909\n\n\nSagawa, T., Boisnier, E., Komatsu, T., Mustapha, K.B., Hattour, A., Kosaka, N., Miyazaki, S., 2010. Using bottom surface reflectance to map coastal marine areas: a new application method for Lyzenga\u2019s model. International Journal of Remote Sensing 31, 3051\u20133064. doi:10.1080/01431160903154341", 
            "title": "Home"
        }, 
        {
            "location": "/#opticalrs", 
            "text": "Optical Remote Sensing Python Library  OpticalRS is a free and open source Python implementation of passive optical remote sensing methods for the derivation of bathymetric maps and maps of submerged habitats. Some of these implementations are my original work and some are my interpretation of methods from journal papers. Citations will be found throughout this documentation to give credit to the original authors.  This documentation is a work in progress and may not currently be up to date with the code. Please contact me if you need help. This library is offered for use without any warranty of any kind in the hope that it can save other researchers the time required to implement these methods from scratch. The bits of code contained here have had various levels of testing. You must validate any results yourself. Please let me know if you find anything wrong or if you have any questions.", 
            "title": "OpticalRS"
        }, 
        {
            "location": "/#features", 
            "text": "FOSS Python code for the implementation of methods from remote sensing journal papers listed below.  And more features listed", 
            "title": "Features"
        }, 
        {
            "location": "/#references", 
            "text": "Lyzenga, D.R., 1981. Remote sensing of bottom reflectance and water attenuation parameters in shallow water using aircraft and Landsat data. International Journal of Remote Sensing 2, 71\u201382. doi:10.1080/01431168108948342  Lyzenga, D.R., 1978. Passive remote sensing techniques for mapping water depth and bottom features. Appl. Opt. 17, 379\u2013383. doi:10.1364/AO.17.000379  Lyzenga, D.R., Malinas, N.P., Tanis, F.J., 2006. Multispectral bathymetry using a simple physically based algorithm. Geoscience and Remote Sensing, IEEE Transactions on 44, 2251 \u20132259. doi:10.1109/TGRS.2006.872909  Sagawa, T., Boisnier, E., Komatsu, T., Mustapha, K.B., Hattour, A., Kosaka, N., Miyazaki, S., 2010. Using bottom surface reflectance to map coastal marine areas: a new application method for Lyzenga\u2019s model. International Journal of Remote Sensing 31, 3051\u20133064. doi:10.1080/01431160903154341", 
            "title": "References"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nOpticalRS was developed under the Ubuntu operating system but should run on Windows and Mac as well. Methods for installing dependencies will vary by operating system but, once the dependencies are installed, installation of OpticalRS can be accomplished with the following command on any OS:\n\n\n$ pip install OpticalRS\n\n\n\nOn systems where the user has insufficient permissions, you may need to run the installation as root by using:\n\n\n$ sudo pip install OpticalRS\n\n\n\nDependencies\n\n\nMany of the dependencies (numpy, scipy, matplotlib, and pandas) are taken care of if you install the \nscipy\n stack (instructions \nhere\n so it makes sense to do scipy first. The installation methods will vary depending on the operating system. Installation instructions can be found on the links below. The following are required for OpticalRS to install and run correctly:\n\n\n\n\nnumpy\n\n\nmatplotlib\n\n\nscipy\n\n\npandas\n\n\nstatsmodels\n\n\nscikit-image\n\n\nscikit-learn\n\n\nGDAL\n\n\ngeopandas\n\n\nrasterstats\n\n\n\n\nIntallation on Ubuntu\n\n\nThe following shell script can be used to install OpticalRS and all of its dependencies on Ubuntu. This script is available from the \nOpticalRS Repository\n as \ninstall_with_dependencies.sh\n. You can either run the script or just copy and paste the commands to the command line one at a time (in the correct order). The result will be the same either way.\n\n\n#!/bin/sh\n# This script has been tested (a bit) on Ubuntu 14.04\n\n# This adds the repository for the gdal stuff (the last apt-get line)\nsudo add-apt-repository ppa:ubuntugis/ppa -y\nsudo apt-get update\n\n# Install Scipy stack. Instructions here: http://www.scipy.org/install.html\nsudo apt-get install -y python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose\n\n# This is needed for the last line that actually installs OpticalRS (and a few dependencies handled by pip)\nsudo apt-get install -y python-pip\n\n# gdal libraries are required by some of the python requirements installed by pip\nsudo apt-get install -y python-gdal libgdal1h gdal-bin libgdal-dev\n\n# This finishes up the dependencies and finally the actual OpticalRS code\nsudo pip install OpticalRS", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "OpticalRS was developed under the Ubuntu operating system but should run on Windows and Mac as well. Methods for installing dependencies will vary by operating system but, once the dependencies are installed, installation of OpticalRS can be accomplished with the following command on any OS:  $ pip install OpticalRS  On systems where the user has insufficient permissions, you may need to run the installation as root by using:  $ sudo pip install OpticalRS", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#dependencies", 
            "text": "Many of the dependencies (numpy, scipy, matplotlib, and pandas) are taken care of if you install the  scipy  stack (instructions  here  so it makes sense to do scipy first. The installation methods will vary depending on the operating system. Installation instructions can be found on the links below. The following are required for OpticalRS to install and run correctly:   numpy  matplotlib  scipy  pandas  statsmodels  scikit-image  scikit-learn  GDAL  geopandas  rasterstats", 
            "title": "Dependencies"
        }, 
        {
            "location": "/installation/#intallation-on-ubuntu", 
            "text": "The following shell script can be used to install OpticalRS and all of its dependencies on Ubuntu. This script is available from the  OpticalRS Repository  as  install_with_dependencies.sh . You can either run the script or just copy and paste the commands to the command line one at a time (in the correct order). The result will be the same either way.  #!/bin/sh\n# This script has been tested (a bit) on Ubuntu 14.04\n\n# This adds the repository for the gdal stuff (the last apt-get line)\nsudo add-apt-repository ppa:ubuntugis/ppa -y\nsudo apt-get update\n\n# Install Scipy stack. Instructions here: http://www.scipy.org/install.html\nsudo apt-get install -y python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose\n\n# This is needed for the last line that actually installs OpticalRS (and a few dependencies handled by pip)\nsudo apt-get install -y python-pip\n\n# gdal libraries are required by some of the python requirements installed by pip\nsudo apt-get install -y python-gdal libgdal1h gdal-bin libgdal-dev\n\n# This finishes up the dependencies and finally the actual OpticalRS code\nsudo pip install OpticalRS", 
            "title": "Intallation on Ubuntu"
        }, 
        {
            "location": "/userguide/", 
            "text": "Getting Started\n\n\nThere are two ways of using \nOpticalRS\n. You can use the \nOpticalRS QGIS Processing Scripts\n or you can invoke the code directly using the \nPython Library\n. Presently, the processing tools represent a small fraction of the \nOpticalRS\n functionality. Please see the appropriate page for more detail.\n\n\nPython Library\n\n\nAt its current stage of development, \nOpticalRS\n is most suited for use as a \nPython\n library. An autogenerated \nlist of modules\n with brief descriptions has been provided as an overview of \nOpticalRS\n. For more information, please see the docstrings in the code.\n\n\nUsage examples will be provided in the form of Jupyter (formerly IPython) notebooks. These can be viewed in static form \non GitHub\n or downloaded and run interactively. However, some notebooks may require datasets that can not be made available (because of licensing and/or enormous file size).\n\n\nIf you are not familiar with \nPython\n but would like to learn, the \nScipy-Lectures\n are a good place to start. The lessons there are directed toward the types of coding that are applicable to optical remote sensing and the specific libraries that were used to build \nOpticalRS\n.\n\n\nProcessing Scripts\n\n\nQGIS\n processing scripts are a relatively simple way to make the \nOpticalRS\n functionality available to \nQGIS\n users through a graphical user interface. \nOpticalRS\n provides \nseveral processing scripts\n but they are still in the early stages of development. Once the scripts are better tested and documented, this section will contain more information about how to install and use them. If you're eager to give it a go before then, consult the \nQGIS documentation\n for information on how to install and run the scripts.", 
            "title": "User Guide"
        }, 
        {
            "location": "/userguide/#getting-started", 
            "text": "There are two ways of using  OpticalRS . You can use the  OpticalRS QGIS Processing Scripts  or you can invoke the code directly using the  Python Library . Presently, the processing tools represent a small fraction of the  OpticalRS  functionality. Please see the appropriate page for more detail.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/userguide/#python-library", 
            "text": "At its current stage of development,  OpticalRS  is most suited for use as a  Python  library. An autogenerated  list of modules  with brief descriptions has been provided as an overview of  OpticalRS . For more information, please see the docstrings in the code.  Usage examples will be provided in the form of Jupyter (formerly IPython) notebooks. These can be viewed in static form  on GitHub  or downloaded and run interactively. However, some notebooks may require datasets that can not be made available (because of licensing and/or enormous file size).  If you are not familiar with  Python  but would like to learn, the  Scipy-Lectures  are a good place to start. The lessons there are directed toward the types of coding that are applicable to optical remote sensing and the specific libraries that were used to build  OpticalRS .", 
            "title": "Python Library"
        }, 
        {
            "location": "/userguide/#processing-scripts", 
            "text": "QGIS  processing scripts are a relatively simple way to make the  OpticalRS  functionality available to  QGIS  users through a graphical user interface.  OpticalRS  provides  several processing scripts  but they are still in the early stages of development. Once the scripts are better tested and documented, this section will contain more information about how to install and use them. If you're eager to give it a go before then, consult the  QGIS documentation  for information on how to install and run the scripts.", 
            "title": "Processing Scripts"
        }, 
        {
            "location": "/modules/", 
            "text": "OpticalRS Modules\n\n\nOpticalRS methods are organized into various modules. When appropriate, modules are named after the journal paper from which they were derived. The following details were autogenerated from the first paragraph of the module docstrings. For full details, look at the docstrings on \nGitHub\n or the the installed code.\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArrayUtils\n\n\nThis module contains functions that are applied to numpy array representations of images. Unless stated otherwise, image arrays are expected to be of shape (RowsxColumnsxN) where N is the number of bands. \n\n\n\n\n\n\nLandMasking\n\n\nThis module contains methods for masking land in multispectral satellite imagery based on thresholding the NIR band and filtering the result for mask connectivity. This code also shows up in the \nMultispectral Land Masker QGIS plugin\n. \n\n\n\n\n\n\nLyzenga1978\n\n\nThis module implements some of the methods described in Lyzenga 1978. These methods are used in depth estimation from multispectral imagery and in water column correction for bottom type classification. \n\n\n\n\n\n\nLyzenga1981\n\n\nThis file will implement methods from Lyzenga 1981 for producing a depth invariant index from multispectral satellite imagery. Unless otherwise stated methods will expect image arrays in the shape of (Rows,Columns,Bands). \n\n\n\n\n\n\nLyzenga2006\n\n\nThis module implements methods described in Lyzenga et al. 2006. The methods implemented so far are mostly the image preprocessing steps. \n\n\n\n\n\n\nMSDisplay\n\n\nMethods for displaying multispectral images and information about them. I've found these methods useful when exploring images. \n\n\n\n\n\n\nMSExposure\n\n\nThis module contains \nPOORLY TESTED\n methods for adjusting the exposure of multispectral images. Unless otherwise stated methods will expect image arrays in the shape of (Rows,Columns,Bands). These methods should be considered expirimental at this point. \n\n\n\n\n\n\nRasterDS\n\n\nThe RasterDS object will provide some utilities for getting raster data sets into and out of numpy array formats. The main feature is the simplification of reading and writing to GeoTiffs from numpy.array format. \n\n\n\n\n\n\nRasterSubset\n\n\nThese are methods for subsetting a raster to get just the cells within a vector geometry. Much of this code is derived from the python \nrasterstats package\n and is dependent on some utilities from that package. I think this code could be rewritten to remove the dependency on having rasterstats installed but I'm not sure when I'll get around to that. \n\n\n\n\n\n\nSagawa2010\n\n\nIn Sagawa et al. 2010 [1]_, an alternative to Lyzenga's depth invariant index is proposed. Sagawa's reflectance index incorporates depth measurements in an attempt to correct for water column attenuation. This code is my attempt at implementing this method.", 
            "title": "Modules"
        }, 
        {
            "location": "/modules/#opticalrs-modules", 
            "text": "OpticalRS methods are organized into various modules. When appropriate, modules are named after the journal paper from which they were derived. The following details were autogenerated from the first paragraph of the module docstrings. For full details, look at the docstrings on  GitHub  or the the installed code.     Module  Description      ArrayUtils  This module contains functions that are applied to numpy array representations of images. Unless stated otherwise, image arrays are expected to be of shape (RowsxColumnsxN) where N is the number of bands.     LandMasking  This module contains methods for masking land in multispectral satellite imagery based on thresholding the NIR band and filtering the result for mask connectivity. This code also shows up in the  Multispectral Land Masker QGIS plugin .     Lyzenga1978  This module implements some of the methods described in Lyzenga 1978. These methods are used in depth estimation from multispectral imagery and in water column correction for bottom type classification.     Lyzenga1981  This file will implement methods from Lyzenga 1981 for producing a depth invariant index from multispectral satellite imagery. Unless otherwise stated methods will expect image arrays in the shape of (Rows,Columns,Bands).     Lyzenga2006  This module implements methods described in Lyzenga et al. 2006. The methods implemented so far are mostly the image preprocessing steps.     MSDisplay  Methods for displaying multispectral images and information about them. I've found these methods useful when exploring images.     MSExposure  This module contains  POORLY TESTED  methods for adjusting the exposure of multispectral images. Unless otherwise stated methods will expect image arrays in the shape of (Rows,Columns,Bands). These methods should be considered expirimental at this point.     RasterDS  The RasterDS object will provide some utilities for getting raster data sets into and out of numpy array formats. The main feature is the simplification of reading and writing to GeoTiffs from numpy.array format.     RasterSubset  These are methods for subsetting a raster to get just the cells within a vector geometry. Much of this code is derived from the python  rasterstats package  and is dependent on some utilities from that package. I think this code could be rewritten to remove the dependency on having rasterstats installed but I'm not sure when I'll get around to that.     Sagawa2010  In Sagawa et al. 2010 [1]_, an alternative to Lyzenga's depth invariant index is proposed. Sagawa's reflectance index incorporates depth measurements in an attempt to correct for water column attenuation. This code is my attempt at implementing this method.", 
            "title": "OpticalRS Modules"
        }
    ]
}